{"version":3,"sources":["components/Clock.js","components/RenderTime.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","Wrapper","className","clockOptions","baseColor","borderColor","borderWidth","centerColor","handColors","hour","minute","second","notchColor","numbersColor","showNumbers","size","styled","div","RenderTime","remainingTime","currentTime","useRef","prevTime","isNewTimeFirstTick","useState","setOneLastRerender","current","useEffect","console","log","setTimeout","val","isTimeUp","NameForm","this","props","value","onChange","placeholder","type","Component","Form","input","App","toggleTimer","setState","prevState","showTimer","toggleInput","showInput","changeTheText","buttonText","state","target","Number","Count","isPlaying","duration","colors","Button3d","action","section","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbc63762.chunk.js","sourcesContent":["import React from 'react';\nimport AnalogueClock from 'react-analogue-clock';\nimport styled from 'styled-components';\n\nexport default function Clock() {\n  return (\n    <Wrapper>\n      <AnalogueClock className=\"clock\" {...clockOptions} />\n    </Wrapper>\n  );\n}\n\nconst clockOptions = {\n  baseColor: '#282c34',\n  borderColor: '#ffffff',\n  borderWidth: 2,\n  centerColor: '#ffffff',\n  handColors: {\n    hour: '#ffffff',\n    minute: '#ffffff',\n    second: '#ffffff',\n  },\n  notchColor: '#ffffff',\n  numbersColor: '#ffffff',\n  showNumbers: false,\n  size: 200,\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  background-color: #282c34;\n  margin-top: 3rem;\n  font-size: 0.2em;\n`;\n","import React, {useRef, useState, useEffect} from 'react';\n\nimport '../components/render-time.css';\n\nconst RenderTime = ({remainingTime}) => {\n  const currentTime = useRef(remainingTime);\n  const prevTime = useRef(null);\n  const isNewTimeFirstTick = useRef(false);\n  const [, setOneLastRerender] = useState(0);\n\n  if (currentTime.current !== remainingTime) {\n    isNewTimeFirstTick.current = true;\n    prevTime.current = currentTime.current;\n    currentTime.current = remainingTime;\n  } else {\n    isNewTimeFirstTick.current = false;\n  }\n\n  // force one last re-render when the time is over to trigger the last animation\n  const theEndFunc = () => {\n    if (remainingTime === 0) {\n      console.log('Silveira God');\n      setTimeout(() => {\n        setOneLastRerender((val) => val + 1);\n      }, 20);\n    }\n  };\n\n  useEffect(() => {\n    theEndFunc();\n  });\n\n  const isTimeUp = isNewTimeFirstTick.current;\n\n  return (\n    <div className=\"time-wrapper\">\n      <div key={remainingTime} className={`time ${isTimeUp ? 'up' : ''}`}>\n        {remainingTime}\n      </div>\n      {prevTime.current !== null && (\n        <div\n          key={prevTime.current}\n          className={`time ${!isTimeUp ? 'down' : ''}`}\n        >\n          {prevTime.current}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RenderTime;\n","import React, {Component} from 'react';\nimport styled from 'styled-components';\n\nclass NameForm extends Component {\n  render() {\n    const {value, onChange} = this.props;\n    return (\n      <Form\n        placeholder={'Enter a number of seconds'}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    );\n  }\n}\n\nexport default NameForm;\n\nconst Form = styled.input`\n  font-size: 0.75rem;\n  position: absolute;\n  margin-top: 42rem;\n  padding: 0.7rem;\n  padding-left: 0.6rem;\n  padding-right: 0.6rem;\n  background-color: #282c34;\n  color: white;\n  text-align: center;\n`;\n","import React, {Component} from 'react';\nimport styled from 'styled-components';\n\nimport Clock from './components/Clock';\nimport RenderTime from './components/RenderTime';\nimport {AwesomeButton} from 'react-awesome-button';\nimport {CountdownCircleTimer} from 'react-countdown-circle-timer';\n\nimport 'react-awesome-button/dist/themes/theme-c137.css';\nimport NameForm from './components/Form';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showInput: true,\n      buttonText: true,\n      remainingTime: '',\n    };\n  }\n\n  toggleTimer = () => {\n    this.setState((prevState) => ({showTimer: !prevState.showTimer}));\n  };\n\n  toggleInput = () => {\n    this.setState((prevState) => ({showInput: !prevState.showInput}));\n  };\n\n  changeTheText = () => {\n    this.setState((prevState) => ({buttonText: !prevState.buttonText}));\n  };\n\n  render() {\n    const {buttonText, remainingTime, showInput} = this.state;\n\n    return (\n      <Wrapper>\n        <Clock />\n        {showInput ? (\n          <NameForm\n            value={remainingTime}\n            onChange={({target: {value}}) =>\n              this.setState({remainingTime: Number(value)})\n            }\n          />\n        ) : (\n          <Count>\n            {\n              <div className=\"timer-wrapper\">\n                <CountdownCircleTimer\n                  isPlaying\n                  duration={\n                    this.state.remainingTime === ''\n                      ? 0\n                      : this.state.remainingTime\n                  }\n                  colors={[['#81f776', 0.33], ['#5caef8', 0.33], ['#A30000']]}\n                >\n                  {RenderTime}\n                </CountdownCircleTimer>\n              </div>\n            }\n          </Count>\n        )}\n        <Button3d>\n          <AwesomeButton\n            action={() => {\n              this.toggleTimer();\n              this.changeTheText();\n              this.toggleInput();\n            }}\n            type=\"primary\"\n            size=\"large\"\n          >\n            {buttonText ? 'Start the timer!' : 'Stop the timer!'}\n          </AwesomeButton>\n        </Button3d>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  flex-direction: column;\n  background-color: #282c34;\n  height: 100vh;\n`;\n\nconst Count = styled.section`\n  position: absolute;\n  margin-top: 25rem;\n`;\n\nconst Button3d = styled.section`\n  margin-top: 30rem;\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}